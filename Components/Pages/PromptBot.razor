@page "/promptbot"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Web
@using System.IO

<h3>Prompt Bot</h3>

<div class="prompt-container">
    <label for="prompt-input" class="prompt-label">Enter your prompt:</label>
    <input id="prompt-input"
           @bind="prompt"
           placeholder="Ask Anything..."
           class="prompt-input"
           @onkeyup="HandleKeyUp" />

    <div class="button-group">
        <button @onclick="SubmitPrompt"
                disabled="@isProcessing"
                class="btn btn-secondary">
            @(isProcessing ? "Processing..." : "Send")
        </button>
    </div>
</div>

@if (showAddResponse)
{
    <div class="prompt-container">
        <label for="response-input" class="prompt-label">The question does not exist. Please enter the answer:</label>
        <input id="response-input"
               @bind="newResponse"
               placeholder="Enter the answer here"
               class="prompt-input" />
        <div class="button-group">
            <button @onclick="AddNewResponse"
                    disabled="@(string.IsNullOrWhiteSpace(newResponse))"
                    class="btn btn-primary">
                Add the answer
            </button>
            <button @onclick="CancelAddResponse"
                    class="btn btn-secondary">
                Exit
            </button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass">
        @message
        @if (!string.IsNullOrEmpty(detailedError))
        {
            <button @onclick="ToggleErrorDetails" class="btn btn-sm btn-link">
                @(showErrorDetails ? "Hide details" : "Show details")
            </button>
            @if (showErrorDetails)
            {
                <div class="error-details">@detailedError</div>
            }
        }
    </div>
}

@if (!string.IsNullOrEmpty(result))
{
    <div class="result-box">
        <h4>Result:</h4>
        <p>@result</p>
    </div>
}

@code {
    private string prompt = string.Empty;
    private string result = string.Empty;
    private string message = string.Empty;
    private string detailedError = string.Empty;
    private bool isProcessing = false;
    private bool showErrorDetails = false;
    private bool showAddResponse = false;
    private string newResponse = string.Empty;
    private Dictionary<string, string> promptResponses = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
    private string alertClass => message.Contains("success") ? "alert-success" : "alert-danger";

    protected override async Task OnInitializedAsync()
    {
        // تحميل البيانات من data.csv عند بدء الصفحة
        await LoadPromptResponses();
    }

    private async Task LoadPromptResponses()
    {
        try
        {
            var dataPath = Path.Combine(Directory.GetCurrentDirectory(), "data.csv");
            if (!File.Exists(dataPath))
            {
                // إنشاء ملف data.csv فاضي مع العنوان لو مش موجود
                await File.WriteAllTextAsync(dataPath, "Text,Response\n");
                message = Messages.DataFileCreated;
                return;
            }

            // قراءة ملف data.csv
            var lines = await File.ReadAllLinesAsync(dataPath);
            if (lines.Length <= 1) // إذا كان الملف فاضي أو فيه بس العنوان
            {
                message = Messages.DataFileEmpty;
                return;
            }

            // تخطي السطر الأول (العنوان)
            foreach (var line in lines.Skip(1))
            {
                var parts = line.Split(',');
                if (parts.Length >= 2)
                {
                    var text = parts[0].Trim('"'); // النص (Text)
                    var response = parts[1].Trim('"'); // الرد (Response)
                    if (!string.IsNullOrEmpty(text) && !string.IsNullOrEmpty(response))
                    {
                        promptResponses[text] = response;
                    }
                }
            }

            message = Messages.DataLoadedSuccessfully;
        }
        catch (Exception ex)
        {
            message = Messages.DataLoadError;
            detailedError = $"Failure to download data: {ex.Message}\nEnsure that there is a Data.csv file and that it is in the correct coordination.";
        }
        StateHasChanged();
    }

    private async Task SubmitPrompt()
    {
        // التحقق من وجود نص في المدخل
        if (string.IsNullOrWhiteSpace(prompt))
        {
            message = Messages.PromptRequired;
            return;
        }

        // بدء عملية البحث عن الرد
        SetProcessingState(true);

        try
        {
            // البحث عن الرد في القاموس
            if (promptResponses.TryGetValue(prompt.Trim(), out var response))
            {
                result = response;
               // message = Messages.ResponseFound;
                showAddResponse = false;
            }
            else
            {
                result = string.Empty;
                message = Messages.NoResponseFound;
                showAddResponse = true; // إظهار حقل إدخال الإجابة
            }
            detailedError = string.Empty;
        }
        catch (Exception ex)
        {
            result = string.Empty;
            message = Messages.ResponseError;
            detailedError = $"Make a mistake : {ex.Message}";
        }
        finally
        {
            SetProcessingState(false);
        }
    }

    private async Task AddNewResponse()
    {
        try
        {
            var dataPath = Path.Combine(Directory.GetCurrentDirectory(), "data.csv");
            // إضافة السؤال والإجابة الجديدة إلى data.csv
            var newLine = $"\"{prompt.Trim()}\",\"{newResponse.Trim()}\"\n";
            await File.AppendAllTextAsync(dataPath, newLine);

            // تحديث القاموس
            promptResponses[prompt.Trim()] = newResponse.Trim();

            // تحديث الواجهة
            result = newResponse;
            message = Messages.ResponseAdded;
            showAddResponse = false;
            newResponse = string.Empty;
        }
        catch (Exception ex)
        {
            message = Messages.ResponseAddError;
            detailedError = $"An error occurred while adding the answer: {ex.Message}";
        }
        StateHasChanged();
    }

    private void CancelAddResponse()
    {
        showAddResponse = false;
        newResponse = string.Empty;
        message = Messages.AddResponseCancelled;
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        // السماح بإرسال المدخل بالضغط على Enter
        if (e.Key == "Enter" && !isProcessing)
        {
            SubmitPrompt();
        }
    }

    private void ToggleErrorDetails()
    {
        // إظهار/إخفاء تفاصيل الخطأ
        showErrorDetails = !showErrorDetails;
    }

    private void SetProcessingState(bool state)
    {
        // تحديث حالة البحث وتحديث الواجهة
        isProcessing = state;
        StateHasChanged();
    }

    private static class Messages
    {
        public const string DataFileCreated = "The file data.csv has been created. You can now enter text to get a response.";
        public const string DataFileMissing = "The file data.csv is missing. Please create the file and add some data.";
        public const string DataFileEmpty = "The file data.csv is empty. Please add some data to work with.";
        public const string DataLoadedSuccessfully = "Data loaded successfully! You can now enter text to get a response.";
        public const string DataLoadError = "An error occurred while loading the data.";
        //public const string ResponseFound = "A matching response was found!";
        public const string NoResponseFound = "No matching response found for the entered text.";
        public const string ResponseError = "An error occurred while searching for a response.";
        public const string ResponseAdded = "Response added successfully!";
        public const string ResponseAddError = "An error occurred while adding the response.";
        public const string AddResponseCancelled = "Adding the response was cancelled.";
        public const string PromptRequired = "Please enter some text first.";
    }

}

<style>
    .prompt-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .prompt-input {
        width: 100%;
        padding: 8px;
        margin: 10px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .button-group {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .alert {
        padding: 10px;
        border-radius: 4px;
        margin: 15px 0;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .result-box {
        margin-top: 20px;
        padding: 15px;
        background-color: #e7f5fe;
        border-left: 4px solid #2196F3;
    }

    .error-details {
        margin-top: 10px;
        padding: 10px;
        background-color: #fff3f3;
        border: 1px solid #ffd6d6;
        border-radius: 4px;
        white-space: pre-wrap;
        font-family: monospace;
    }
</style>